{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","type","value","onChange","change","placeholder","Result","_props$weather","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","toUpperCase","className","concat","APIKey","App","state","handleInputChange","e","_this","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","console","log","prevState","href","components_Form","this","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01ade83c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n        placeholder=\"Enter the city\"\r\n      />\r\n      <button>Search</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\nconst Result = props => {\r\n  const {\r\n    date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    err\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n    content = (\r\n      <>\r\n        <h3>\r\n          Search results for: <em>{city.toUpperCase()}</em>\r\n        </h3>\r\n        <h4>\r\n          Data for day and time: <strong>{date}</strong>\r\n        </h4>\r\n        <h4>\r\n          Current temperature: <strong>{temp}</strong> &#176;C\r\n        </h4>\r\n        <h4>\r\n          Sunrise today at <strong>{sunriseTime}</strong>\r\n        </h4>\r\n        <h4>\r\n          Sunset today at <strong>{sunsetTime}</strong>\r\n        </h4>\r\n        <h4>\r\n          Current wind force <strong>{wind}</strong> m/s\r\n        </h4>\r\n        <h4>\r\n          Current pressure <strong>{pressure}</strong> hPa\r\n        </h4>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"result\">\r\n      {err ? `We do not have in base ${city}` : content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport \"./App.css\";\n\n// Klucz do API\nconst APIKey = \"efa2ef11f117f7485b2fca8e87a3a2f5\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    err: false\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  handleCitySubmit = e => {\n    e.preventDefault();\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"Error..\");\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString();\n        this.setState(state => ({\n          err: false,\n          date: time,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          city: state.value\n        }));\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }));\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <h1 className=\"App-header\">Weather App - React</h1>\n          <p className=\"App-description\">\n            Task to practise REACT and API - I used fetch to load file from{\" \"}\n            <a className=\"App-link\" href=\"https://openweathermap.org/\">\n              OpenWeather\n            </a>\n            . You can find the code on{\" \"}\n            <a\n              className=\"App-link\"\n              href=\"https://github.com/Krystian2017/WeatherApp_React\"\n            >\n              my GitHub account.\n            </a>\n          </p>\n        </div>\n        <div></div>\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit}\n        />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}